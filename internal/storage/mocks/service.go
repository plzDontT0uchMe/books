// Code generated by MockGen. DO NOT EDIT.
// Source: internal/interfaces/storage.go
//
// Generated by this command:
//
//	mockgen -source=internal/interfaces/storage.go -destination=internal/storage/mocks/service.go
//

// Package mock_interfaces is a generated GoMock package.
package mock_interfaces

import (
	models "backend/go/books/internal/models"
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
	isgomock struct{}
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// GetAuthors mocks base method.
func (m *MockStorage) GetAuthors(ctx context.Context) (models.Authors, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthors", ctx)
	ret0, _ := ret[0].(models.Authors)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthors indicates an expected call of GetAuthors.
func (mr *MockStorageMockRecorder) GetAuthors(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthors", reflect.TypeOf((*MockStorage)(nil).GetAuthors), ctx)
}

// GetBook mocks base method.
func (m *MockStorage) GetBook(ctx context.Context, id int) (*models.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBook", ctx, id)
	ret0, _ := ret[0].(*models.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBook indicates an expected call of GetBook.
func (mr *MockStorageMockRecorder) GetBook(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBook", reflect.TypeOf((*MockStorage)(nil).GetBook), ctx, id)
}

// GetBooks mocks base method.
func (m *MockStorage) GetBooks(ctx context.Context) (models.Books, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBooks", ctx)
	ret0, _ := ret[0].(models.Books)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBooks indicates an expected call of GetBooks.
func (mr *MockStorageMockRecorder) GetBooks(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBooks", reflect.TypeOf((*MockStorage)(nil).GetBooks), ctx)
}
